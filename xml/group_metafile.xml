<?xml version="1.0" encoding="UTF-8"?>
<dsa_metafile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.cems.uwe.ac.uk/~p-chatterjee/modules/dsa/group_metafile.xsd">
    <!-- This file is an example of a valid group metadata file. 
    Use this example file as a template and fill with your own data 
    validating as you go along using Oxygen or some other schema aware editor -->

    <!-- The following is the assignment metadata (not to be changed) -->
    <module id="UFCEKG-20-2" acronymn="DSA">
        <title>Data Schemas &amp; Applications</title>
        <year>2013</year>
        <hand_in>2013-02-28</hand_in>
        <spec_url>http://www.cems.uwe.ac.uk/~p-chatterjee/2011/dsa/DSA_CW_Spec.html</spec_url>
    </module>
    <!-- end of metadata section -->

    <!-- Group Section -->
    <group>
        <member id="11020070" name="Samir Vora"/>
        <member id="11013888" name="Grant Ponter"/>
        <member id="11013887" name="Nicholas Pruett"/>
        <member id="10005183" name="Irene Okwuka"/>
        <workshop>
            <daytime>Tuesday 09:00</daytime>
            <tutor>PC</tutor>
            <tutor>GW</tutor>
        </workshop>
        <!-- Each student should have contributed to one or more components -->
        <component type="Database Design">
            <contributor id="11020070"/>
            <contributor id="11013888"/>
            <contributor id="11013887"/>
            <contributor id="10005183"/>
            <!-- the following text fields allow for between 80 and 300 characters -->
            <description> 
                To create a conceptual database model which will be used to store artist, album, and track data 
                as well as user data and their favourite artist and track data. The database also had to be in the 
                third normalised form and not contain any repeating fields.
            </description>
            <problems>
                We had a problem whilst normalising the database removing the many-to-many relationship between the 
                user, artist and track. This was because a user could favourite many artists and tracks, and each individual 
                artist and track could also be favourited by many users.
            </problems>
            <solutions>
                We created two entities – fav_artist and fav_track - which stored a compound key consisting of the artist/track’s 
                primary key and the user’s primary key, as well as having its own unique primary. This solved the problem because 
                a single entity is used to identify the user’s favourite artists/track.
            </solutions>
            <!-- integer required between 1 and 120 -->
            <hours_effort>3</hours_effort>
        </component>
        <component type="Database Implementation">
            <contributor id="11020070"/>
            <description>
                We used PhpMyAdmin on the UWE servers to implement our database and manually create the tables. It was important for
                us to consider the type of data that would be stored within each column so that they would not be left empty if the 
                wrong data type was accidently inserted.
            </description>
            <problems>
                One problem which we encountered after we had implemented the database was that the publish_date for the album table was 
                appearing empty, whilst the other columns in the table were all filled. We checked the PHP query which was meant to insert 
                data into it, but nothing wrong was found.
            </problems>
            <solutions>
                We found that it was because we were inserting a string variable into the publish_date data field instead of a date variable. 
                This was because when we implemented the database we set the publish_date’s field type to be date, therefore it would only accept 
                data in the form of date.
            </solutions>
            <hours_effort>4</hours_effort>
        </component>
        <component type="HTML Markup">
            <contributor id="11020070"/>
            <contributor id="11013887"/>
            <contributor id="11013888"/>
            <contributor id="10005183"/>
            <description>
                We used HTML5 to design the frontend of our application. We integrated and presented to 
                the user the data generated by the PHP in a meaningful and eye catching way. We also focused 
                on increasing the usability of our application by making it compatible with the latest browsers 
                available.
            </description>
            <problems>
                We encountered a few problems whilst integrating the PHP with the HTML. The main challenges for us 
                were incorporating the dynamic HTML content generated by the PHP. Since we worked separately from the 
                people doing the PHP, we had very little idea of what dynamic content they wanted to present.
            </problems>
            <solutions>
                We had regular meetings with the people doing the PHP so that we were able to get information on the 
                dynamic data they would be gathering, and also to find out what data they wanted to present so that we 
                could design the HTML pages to accommodate that data.
            </solutions>
            <hours_effort>10</hours_effort>
        </component>
        <component type="PHP Coding">
            <contributor id="11020070"/>
            <description>
                We used PHP to retrieve XML and JSON data from various APIs about artists, tracks, albums and other pieces of 
                data relevant to our application. We filtered the retrieved data to be inserted into our database. We also 
                generated HTML code on the fly to present the retrieved data in our application.
            </description>
            <problems>
                When the user clicked on the artist page, it took the relevant PHP script around four seconds to acquire, sort and 
                generate HTML code to display the list of artists due to the PHP having to retrieve data from multiple APIs.
            </problems>
            <solutions>
                To increase load time, we cached the data generated from the PHP page and stored it in a SESSION variable which would 
                be accessed by an ID. This meant that the PHP script would not have to probe the APIs each time the user clicked on the 
                artist page.
            </solutions>
            <hours_effort>12</hours_effort>
        </component>
        <component type="Javascript Coding">
            <contributor id="11020070"/>
            <contributor id="11013887"/>
            <description>
                We used AJAX requests on member’s page to get the user’s favourite artists and tracks. When the user clicked on the artist 
                button, the contents of the artist PHP script would be loaded via the AJAX request and displayed to the user. The same 
                applied to when the user clicks on the tracks button.
            </description>
            <problems>
                One problem we had was finding out if the user had pressed the favourite artist button or the favourite tracks button so 
                that we could request the correct PHP script’s content and display it to the user.  This was also a problem because we had 
                not used AJAX or any form of JavaScript before.
            </problems>
            <solutions> 
                We were able to find out which button the user clicked on by passing a constant string value of either ‘artist’ or ‘track’ into 
                an AJAX function which then passed it into the AJAX script. The string was then used in a switch statement to load appropriate 
                PHP file based on the term passed.
            </solutions>
            <hours_effort>2</hours_effort>
        </component>
        <component type="CSS Design">
            <contributor id="11020070"/>
            <contributor id="10005183"/>
            <contributor id="11013888"/>
            <description>
                We used CSS3 to design our application and make it look consistent throughout, and at the same time keeping to the rap music theme. 
                Our goal was to emphasise dynamic information so that users are made aware of any changes that might occur due to their actions or 
                any changes in the data generated.
            </description>
            <problems> 
                One major challenge that we faced was creating the design of the whole application. We needed the design to be appealing to the user, 
                but at the same time allow every artist, and dynamic data to be noticed by the user as they navigate through the application.
            </problems>
            <solutions> 
                To do this, we made a design decision of using only black and white colour scheme throughout the application. This meant that the albums, 
                artist profile images and dynamic information – coloured in red – would be noticed by the user because they would stand out from its surrounding.
            </solutions>
            <hours_effort>9</hours_effort>
        </component>
    </group>

    <!-- Individual components are listed here -->
    <individual id="11020070">
        <component type="Videos">
            <description>
                The widget combines feeds from YouTube and Dailymotion, and displays the videos that are relevant to 
                the artist the user is viewing. It uses a combination of AJAX, JQuery, and PHP to allow the user to 
                click on the two buttons at the top to switch between the video feeds.
            </description>
            <problems>
                One problem I had was using AJAX requests to get the video data for the button that the user clicks. 
                For example if they clicked on the Dailymotion button, the PHP script for Dailymotion should be executed 
                and the video data gathered from that script should be displayed to the user.
                
                Another problem I found was passing the the artist name from the main script running the widget to the PHP
                script acquiring the video data. This was a problem because I was unable to include the video PHP scripts
                because I was requesting the those scripts via AJAX.
            </problems>
            <solutions>
                Passed a string to the AJAX script via a function from the artist page. The string was the name of the PHP 
                script to be executed. I used a switch statement to match the string against some predefined constants. If 
                they matched, then a variable is set containing the path to the appropriate PHP file.
                
                To solve the second problem, I had to embed the PHP code within an AJAX function which allowed me to pass the artist's
                name to the AJAX script. From the AJAX, I then instantiated a variable to the artist name that was passed in, and then passed
                that variable as a query when I requested the PHP script via the AJAX. With this I was able to recieve the artist's name on the
                PHP script that got the feed of the artist's videos.
            </solutions>
            <hours_effort>5</hours_effort>
        </component>
    </individual>
    <individual id="11013887">
        <component type="Social Media">
            <description>
				I created a social media widget – specifically focused on Twitter. I thought that it’d be a good idea to have 
				a Twitter Feed added to the site so that users could see what people were saying about the Genre that our 
				website was about. 
			</description>
            <problems>
				One of the problems that I came across was working out how I would style it, as without a style it would just 
				be a block of text. 
				
				Another problem I had was that I still wasn’t really sure on how to use the Twitter API 
				correctly. This would mean that my widget would be meaningless without data.
			</problems>
            <solutions>
				For the first solution I sketch out how I’d want my widget to look. This way I was able to style my in close detail.

				For the second solution, I looked at tutorials online and found out how I was meant to implement the code from the 
				Twitter API, as well as start learning PHP.
			</solutions>
            <hours_effort>3</hours_effort>
        </component>
    </individual>
    <individual id="11013888">
        <component type="Other">
            <description>
				I created a Flickr widget which displayed photos from the Flickr database that contained the tag ‘rap music’. The API I 
				used presented data in a JSON format. This meant that I had to loop through each element to retrieve the data I wanted.
			</description>
            <problems>
				The problem which I encountered was not being able to retrieve all the elements containing the data within the API. This 
				was because programming knowledge is not that strong, and that I was stuck on gathering all the required data.
			</problems>
            <solutions>
				To help me with this problem, and for me to learn how to retrieve all the required elements, I asked a member of our group 
				for help. They suggested that I use a foreach loop to loop through each of the elements within the JSON file and gather the 
				required data every time it loops round.
			</solutions>
            <hours_effort>8</hours_effort>
        </component>
    </individual>
    <individual id="10005183">
        <component type="Other">
            <description> 
                My widget acquired an RSS feed from iTunes which contained a list of fifteen rap music albums in the 
                current top charts. The technologies that were used to implement the Widget were CSS, PHP and HTML. I had to loop through the feeds 
				to get the album image and title while storing that variable. 
            </description>
            <problems> 
                I encountered a problem fitting the top ten albums onto the homepage of the application. This was because 
                there was not enough space for all of the top ten albums to fit in the reserved space.
            </problems>
            <solutions>
                To resolve this problem, I reduced the file into top five albums by ending the loop once it reached the fifth 
                element. This enabled it fit properly to the space provided for my widget.
            </solutions>
            <hours_effort>8</hours_effort>
        </component>
    </individual>

    <!-- This section gives a link to 1-2 group components, lists the techohnolgies used and 
        points to any number of source files. Note that the more that these links work - 
        the higher the mark for this section. Of course - the base_url link must work!! -->
    <application>
        <!-- Make sure the base_url for the main application is reachable as 
            http://www.cems.uwe.ac.uk/~a-student/dsa/ or something very similar -->
        <base_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/</base_url>
        <!-- a list of up to 8 technologies used (see schema) -->
        <technologies>
            <tech>php</tech>
            <tech>html5</tech>
            <tech>css</tech>
            <tech>javascript</tech>
        </technologies>
        <!-- configuration source file if one is used - should be a .phps or .xml -->
        <config_source>#</config_source>
        <!-- URL of the Data Model - could be a HTML page with ann image or a gif file -->
        <dm_source>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/database/DB_model.png</dm_source>
        <source_files>
            <file>
                <name>HTML scripts</name>
                <purpose>The folder containing the HMTL5 scripts integrated with PHP to display the artist, tracks, albums, register, login, members, and RSS</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/html/</source_url>
            </file>
            <file>
                <name>PHP scripts</name>
                <purpose>Folder containing the PHP scripts used in the application</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/scripts/</source_url>
            </file>
            <file>
                <name>Javascript</name>
                <purpose>Folder Containing the Javascript used in the application</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/js/</source_url>
            </file>
            <file>
                <name>CSS</name>
                <purpose>Folder Containing the CSS scripts used in the application</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/css/</source_url>
            </file>
            <file>
                <name>Video Widget</name>
                <purpose>Folder Containing the php and css scripts used to create the video widget</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/video_Widget/</source_url>
            </file>
            <file>
                <name>Twitter Widget</name>
                <purpose>Folder Containing scripts used to create the Twitter widget</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/twitter_Widget/</source_url>
            </file>
            <file>
                <name>Flickr Widget</name>
                <purpose>Folder Containing scripts used to create the Flickr widget</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/flick_r_widget/</source_url>
            </file>
            <file>
                <name>Top 5 Albums Widget</name>
                <purpose>Folder Containing scripts used to create the Top 5 albums widget</purpose>
                <source_url>http://www.cems.uwe.ac.uk/~s2-vora/dsa/viewable_scripts/top_albums_widget/</source_url>
            </file>
        </source_files>
    </application>

    <!-- something about any learning outcomes achieved and any other overall comments -->
    <overall_comments> 
		From doing this assignment we learned to work and co-operate as a team. Our group was a mixture of people from 
		different courses, and so co-operation and time management was essential for us to achieve our goals and targets. 
		We also had regular team meeting on the Tuesday’s DSA tutorial within which we discussed any issues that needed 
		addressing, and offered help to anyone that needed it.
		
		We were also able to further increase our understanding of PHP, Javascript, HTML5 and CSS3 by using these tools to 
		integrate data from multiple sources and add functionality and usability to our application. For example, we used PHP 
		to retrieve dynamic data from multiple APIs about the artists, and then used HTML5 and CSS3 to display that data to the user.
		
		We also learned to use and understand new tools such as XML, JSON, and RSS to gather dynamic data from the internet. For example, 
		to acquire data about artists, tracks and albums we had to use an API which was displayed in an XML format. We had to learn to navigate 
		through the XML tree to get to the element that we wanted. We also used RSS to show to the user the two most recently favourite artist 
		and tracks, which helped us to understand how we could generate dynamic content for other people to use in their application.
		
		Learning to use databases was essential for this assignment. Before the assignment we had no idea of how a database was structured or normalised. 
		But now looking back at what we have achieved, we believe that we have learned a great deal about modelling, implementing and managing a database. 
		For example, learning about how a table should not contain any repeating data so to remove data redundancy, and also learning about removing 
		many-to-many relationships for the database to be in the third normal form.
    </overall_comments>
</dsa_metafile>
<!-- DSA Assignment Metadata File Example, 2013 -->
<!-- author: prakash.chatterjee@uwe.ac.uk -->
